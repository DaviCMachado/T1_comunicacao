# --- Codificações disponíveis ---

def nrzl(bits):
    tempo, sinal = [], []
    t = 0
    for bit in bits:
        tempo += [t, t + 1]
        sinal += [1 if bit == '1' else -1] * 2
        t += 1
    return tempo, sinal

def nrzi(bits):
    tempo, sinal = [], []
    nivel = 1
    t = 0
    for bit in bits:
        if bit == '1':
            nivel *= -1
        tempo += [t, t + 1]
        sinal += [nivel] * 2
        t += 1
    return tempo, sinal

def ami(bits):
    tempo, sinal = [], []
    nivel = 1
    t = 0
    for bit in bits:
        tempo += [t, t + 1]
        if bit == '1':
            sinal += [nivel] * 2
            nivel *= -1
        else:
            sinal += [0] * 2
        t += 1
    return tempo, sinal

def pseudoternario(bits):
    tempo, sinal = [], []
    nivel = 1
    t = 0
    for bit in bits:
        tempo += [t, t + 1]
        if bit == '0':
            sinal += [nivel] * 2
            nivel *= -1
        else:
            sinal += [0] * 2
        t += 1
    return tempo, sinal

def manchester(bits):
    tempo, sinal = [], []
    t = 0
    for bit in bits:
        tempo += [t, t + 0.5, t + 0.5, t + 1]
        if bit == '1':
            sinal += [-1, -1, 1, 1]
        else:
            sinal += [1, 1, -1, -1]
        t += 1
    return tempo, sinal

def manchester_diferencial(bits):
    tempo, sinal = [], []
    nivel = 1
    t = 0
    for bit in bits:
        tempo += [t, t + 0.5, t + 0.5, t + 1]
        if bit == '1':
            nivel *= -1
        sinal += [nivel, nivel, -nivel, -nivel]
        t += 1
    return tempo, sinal

def b8zs(bits):
    tempo, sinal = [], []
    nivel = 1  # Polaridade inicial
    t = 0
    contadorZero = 0

    i = 0
    while i < len(bits):
        bit = bits[i]
        if bit == '1':
            contadorZero = 0
            tempo += [t, t + 0.5, t + 0.5, t + 1]
            nivel *=-1
            sinal += [0, 0, nivel, nivel]
        else:
            contadorZero += 1
            if contadorZero == 8:
                # Apaga os últimos 7 tempos e sinais de 0
                tempo = tempo[:-7*4]  # 7 bits * 4 tempos por bit
                sinal = sinal[:-7*4]

                seq = [0, 0, 0, nivel, -nivel, 0, -nivel, nivel]
                for bit_b8zs in seq:
                    tempo += [t, t + 0.5, t + 0.5, t + 1]
                    sinal += [0, 0, bit_b8zs, bit_b8zs]
                    t += 1
                contadorZero = 0
                i += 1
                continue
            else:
                tempo += [t, t + 0.5, t + 0.5, t + 1]
                sinal += [0, 0, 0, 0]
        t += 1
        i += 1

    return tempo, sinal

def four_b5b(bits):
    tabela = {
        '0000':'11110',
        '0001':'01001',
        '0010':'10100',
        '0011':'10101',
        '0100':'01010',
        '0101':'01011',
        '0110':'01110',
        '0111':'01111',
        '1000':'10010',
        '1001':'10011',
        '1010':'10110',
        '1011':'10111',
        '1100':'11010',
        '1101':'11011',
        '1110':'11100',
        '1111':'11101'
    }

    codificado=''
    quads = [bits[i:i+4] for i in range(0, len(bits), 4)]
    for quad in quads:
        if len(quad)<4:
            codificado = codificado+quad
        else:
            codificado = codificado+tabela[quad]

    # segundo wikpedia: ( https://en-m-wikipedia-org.translate.goog/wiki/4B5B?_x_tr_sl=en&_x_tr_tl=pt&_x_tr_hl=pt&_x_tr_pto=tc)
    # On optical fiber, the 4B5B output is NRZI-encoded. 
    # FDDI over copper (CDDI) uses MLT-3 encoding instead, as does 100BASE-TX Fast Ethernet.
    return nrzi(bits)        

def mlt3(bits):
    nivel = 0
    t = 1
    tempo, sinal = [], []
    ultimoNivelNaoNulo = 1 #primeiro '1' faz tensão ir p baixo
    for bit in bits:
        if bit == '1':
            if len(sinal)==0 or sinal[-1] == 0:
                ultimoNivelNaoNulo *=-1
                nivel = ultimoNivelNaoNulo
            elif sinal[-1] == 1 or sinal[-1] == -1:
                nivel = 0 

        elif bit == '0': #faz nada, mantém valores.
            pass

        tempo += [t, t+1]
        sinal += [nivel]*2

        t += 1
        
    return tempo, sinal

def _8bt6(bits):
    mapeamento = {
        0x00: [-1,+1,0,0,-1,+1], 0x01: [0,-1,+1,-1,+1,0], 0x02: [0,-1,+1,0,-1,+1], 0x03: [0,-1,+1,+1,0,-1],
        0x04: [-1,+1,0,+1,0,-1], 0x05: [+1,0,-1,-1,+1,0], 0x06: [+1,0,-1,0,-1,+1], 0x07: [+1,0,-1,+1,0,-1],
        0x08: [-1,+1,0,0,+1,-1], 0x09: [0,-1,+1,+1,-1,0], 0x0A: [0,-1,+1,0,+1,-1], 0x0B: [0,-1,+1,-1,0,+1],
        0x0C: [-1,+1,0,-1,0,+1], 0x0D: [+1,0,-1,+1,-1,0], 0x0E: [+1,0,-1,0,+1,-1], 0x0F: [+1,0,-1,-1,0,+1],
        0x10: [0,-1,-1,+1,0,+1], 0x11: [-1,0,-1,0,+1,+1], 0x12: [-1,0,-1,+1,0,+1], 0x13: [-1,0,-1,+1,+1,0],
        0x14: [0,-1,-1,+1,+1,0], 0x15: [-1,-1,0,0,+1,+1], 0x16: [-1,-1,0,+1,0,+1], 0x17: [-1,-1,0,+1,+1,0],
        0x18: [-1,+1,0,-1,+1,0], 0x19: [+1,-1,0,-1,+1,0], 0x1A: [-1,+1,+1,-1,+1,0], 0x1B: [+1,0,0,-1,+1,0],
        0x1C: [+1,0,0,+1,-1,0], 0x1D: [-1,+1,+1,+1,-1,0], 0x1E: [+1,-1,0,+1,-1,0], 0x1F: [-1,+1,0,+1,-1,0],
        0x20: [-1,+1,+1,-1,0,0], 0x21: [+1,0,0,+1,-1,-1], 0x22: [-1,+1,0,-1,+1,+1], 0x23: [+1,-1,0,-1,+1,+1],
        0x24: [+1,-1,0,+1,0,0], 0x25: [-1,+1,0,+1,0,0], 0x26: [+1,0,0,-1,0,0], 0x27: [-1,+1,+1,+1,-1,-1],
        0x28: [0,+1,+1,-1,0,-1], 0x29: [+1,0,+1,0,-1,-1], 0x2A: [+1,0,+1,-1,0,-1], 0x2B: [+1,0,+1,-1,-1,0],
        0x2C: [0,+1,+1,-1,-1,0], 0x2D: [+1,+1,0,0,-1,-1], 0x2E: [+1,+1,0,-1,0,-1], 0x2F: [+1,+1,0,-1,-1,0],
        0x30: [+1,-1,0,0,-1,+1], 0x31: [0,+1,-1,-1,+1,0], 0x32: [0,+1,-1,0,-1,+1], 0x33: [0,+1,-1,+1,0,-1],
        0x34: [+1,-1,0,+1,0,-1], 0x35: [-1,0,+1,-1,+1,0], 0x36: [-1,0,+1,0,-1,+1], 0x37: [-1,0,+1,+1,0,-1],
        0x38: [+1,-1,0,0,+1,-1], 0x39: [0,+1,-1,+1,-1,0], 0x3A: [0,+1,-1,0,+1,-1], 0x3B: [0,+1,-1,-1,0,+1],
        0x3C: [+1,-1,0,-1,0,+1], 0x3D: [-1,0,+1,+1,-1,0], 0x3E: [-1,0,+1,0,+1,-1], 0x3F: [-1,0,+1,-1,0,+1],
        0x40: [-1,0,0,+1,0,+1], 0x41: [0,-1,0,0,+1,+1], 0x42: [0,-1,0,+1,0,+1], 0x43: [0,-1,0,+1,+1,0],
        0x44: [-1,0,0,+1,+1,0], 0x45: [0,0,-1,0,+1,+1], 0x46: [0,0,-1,+1,0,+1], 0x47: [0,0,-1,+1,+1,0],
        0x48: [0,0,+1,0,0,0], 0x49: [+1,+1,-1,0,0,0], 0x4A: [+1,-1,+1,0,0,0], 0x4B: [-1,+1,+1,0,0,0],
        0x4C: [0,+1,-1,0,0,0], 0x4D: [+1,0,-1,0,0,0], 0x4E: [0,-1,+1,0,0,0], 0x4F: [-1,0,+1,0,0,0],
        0x50: [+1,-1,-1,+1,0,+1], 0x51: [-1,+1,-1,0,+1,+1], 0x52: [-1,+1,-1,+1,0,+1], 0x53: [-1,+1,-1,+1,+1,0],
        0x54: [+1,-1,-1,+1,+1,0], 0x55: [-1,-1,+1,0,+1,+1], 0x56: [-1,-1,+1,+1,0,+1], 0x57: [-1,-1,+1,+1,+1,0],
        0x58: [-1,-1,0,+1,+1,+1], 0x59: [-1,0,-1,+1,+1,+1], 0x5A: [0,-1,-1,+1,+1,+1], 0x5B: [0,-1,-1,0,+1,+1],
        0x5C: [+1,-1,-1,0,+1,+1], 0x5D: [-1,0,0,0,+1,+1], 0x5E: [0,+1,+1,+1,-1,-1], 0x5F: [0,+1,+1,-1,0,0],
        0x60: [0,+1,+1,0,-1,0], 0x61: [+1,0,+1,-1,0,0], 0x62: [+1,0,+1,0,-1,0], 0x63: [+1,0,+1,0,0,-1],
        0x64: [0,+1,+1,0,0,-1], 0x65: [+1,+1,0,-1,0,0], 0x66: [+1,+1,0,0,-1,0], 0x67: [+1,+1,0,0,0,-1],
        0x68: [0,+1,+1,-1,+1,-1], 0x69: [+1,0,+1,+1,-1,-1], 0x6A: [+1,0,+1,-1,+1,-1], 0x6B: [+1,0,+1,-1,-1,+1],
        0x6C: [0,+1,+1,-1,-1,+1], 0x6D: [+1,+1,0,+1,-1,-1], 0x6E: [+1,+1,0,-1,+1,-1], 0x6F: [+1,+1,0,-1,-1,+1],
        0x70: [0,0,0,+1,+1,-1], 0x71: [0,0,0,+1,-1,+1], 0x72: [0,0,0,-1,+1,+1], 0x73: [0,0,0,+1,0,0],
        0x74: [0,0,0,+1,0,-1], 0x75: [0,0,0,+1,-1,0], 0x76: [0,0,0,-1,0,+1], 0x77: [0,0,0,-1,+1,0],
        0x78: [+1,+1,+1,-1,-1,0], 0x79: [+1,+1,+1,-1,0,-1], 0x7A: [+1,+1,+1,0,-1,-1], 0x7B: [0,+1,+1,0,-1,-1],
        0x7C: [-1,0,0,-1,+1,+1], 0x7D: [-1,0,0,+1,0,0], 0x7E: [+1,-1,-1,-1,+1,+1], 0x7F: [+1,-1,-1,+1,0,0],
        0x80: [-1,0,0,+1,-1,+1], 0x81: [0,-1,0,-1,+1,+1], 0x82: [0,-1,0,+1,-1,+1], 0x83: [0,-1,0,+1,+1,-1],
        0x84: [-1,0,0,+1,+1,-1], 0x85: [0,0,-1,-1,+1,+1], 0x86: [0,0,-1,+1,-1,+1], 0x87: [0,0,-1,+1,+1,-1],
        0x88: [-1,0,0,0,+1,0], 0x89: [0,-1,0,+1,0,0], 0x8A: [0,-1,0,0,+1,0], 0x8B: [0,-1,0,0,0,+1],
        0x8C: [-1,0,0,0,0,+1], 0x8D: [0,0,-1,+1,0,0], 0x8E: [0,0,-1,0,+1,0], 0x8F: [0,0,-1,0,0,+1],
        0x90: [+1,-1,-1,+1,-1,+1], 0x91: [-1,+1,-1,-1,+1,+1], 0x92: [-1,+1,-1,+1,-1,+1], 0x93: [-1,+1,-1,+1,+1,-1],
        0x94: [+1,-1,-1,+1,+1,-1], 0x95: [-1,-1,+1,-1,+1,+1], 0x96: [-1,-1,+1,+1,-1,+1], 0x97: [-1,-1,+1,+1,+1,-1],
        0x98: [+1,-1,-1,0,+1,0], 0x99: [-1,+1,-1,+1,0,0], 0x9A: [-1,+1,-1,0,+1,0], 0x9B: [-1,+1,-1,0,0,+1],
        0x9C: [+1,-1,-1,0,0,+1], 0x9D: [-1,-1,+1,+1,0,0], 0x9E: [-1,-1,+1,0,+1,0], 0x9F: [-1,-1,+1,0,0,+1],
        0xA0: [-1,+1,+1,0,-1,0], 0xA1: [+1,-1,+1,-1,0,0], 0xA2: [+1,-1,+1,0,-1,0], 0xA3: [+1,-1,+1,0,0,-1],
        0xA4: [-1,+1,+1,0,0,-1], 0xA5: [+1,+1,-1,-1,0,0], 0xA6: [+1,+1,-1,0,-1,0], 0xA7: [+1,+1,-1,0,0,-1],
        0xA8: [-1,+1,+1,-1,+1,-1], 0xA9: [+1,-1,+1,+1,-1,-1], 0xAA: [+1,-1,+1,-1,+1,-1], 0xAB: [+1,-1,+1,-1,-1,+1],
        0xAC: [-1,+1,+1,-1,-1,+1], 0xAD: [+1,+1,-1,+1,-1,-1], 0xAE: [+1,+1,-1,-1,+1,-1], 0xAF: [+1,+1,-1,-1,-1,+1],
        0xB0: [+1,0,0,0,-1,0], 0xB1: [0,+1,0,-1,0,0], 0xB2: [0,+1,0,0,-1,0], 0xB3: [0,+1,0,0,0,-1],
        0xB4: [+1,0,0,0,0,-1], 0xB5: [0,0,+1,-1,0,0], 0xB6: [0,0,+1,0,-1,0], 0xB7: [0,0,+1,0,0,-1],
        0xB8: [+1,0,0,-1,+1,-1], 0xB9: [0,+1,0,+1,-1,-1], 0xBA: [0,+1,0,-1,+1,-1], 0xBB: [0,+1,0,-1,-1,+1],
        0xBC: [+1,0,0,-1,-1,+1], 0xBD: [0,0,+1,+1,-1,-1], 0xBE: [0,0,+1,-1,+1,-1], 0xBF: [0,0,+1,-1,-1,+1],
        0xC0: [-1,+1,0,+1,-1,+1], 0xC1: [0,-1,+1,-1,+1,+1], 0xC2: [0,-1,+1,+1,-1,+1], 0xC3: [0,-1,+1,+1,+1,-1],
        0xC4: [-1,+1,0,+1,+1,-1], 0xC5: [+1,0,-1,-1,+1,+1], 0xC6: [+1,0,-1,+1,-1,+1], 0xC7: [+1,0,-1,+1,+1,-1],
        0xC8: [-1,+1,0,0,+1,0], 0xC9: [0,-1,+1,+1,0,0], 0xCA: [0,-1,+1,0,+1,0], 0xCB: [0,-1,+1,0,0,+1],
        0xCC: [-1,+1,0,0,0,+1], 0xCD: [+1,0,-1,+1,0,0], 0xCE: [+1,0,-1,0,+1,0], 0xCF: [+1,0,-1,0,0,+1],
        0xD0: [+1,-1,0,+1,-1,+1], 0xD1: [0,+1,-1,-1,+1,+1], 0xD2: [0,+1,-1,+1,-1,+1], 0xD3: [0,+1,-1,+1,+1,-1],
        0xD4: [+1,-1,0,+1,+1,-1], 0xD5: [-1,0,+1,-1,+1,+1], 0xD6: [-1,0,+1,+1,-1,+1], 0xD7: [-1,0,+1,+1,+1,-1],
        0xD8: [+1,-1,0,0,+1,0], 0xD9: [0,+1,-1,+1,0,0], 0xDA: [0,+1,-1,0,+1,0], 0xDB: [0,+1,-1,0,0,+1],
        0xDC: [+1,-1,0,0,0,+1], 0xDD: [-1,0,+1,+1,0,0], 0xDE: [-1,0,+1,0,+1,0], 0xDF: [-1,0,+1,0,0,+1],
        0xE0: [-1,+1,+1,0,-1,+1], 0xE1: [+1,-1,+1,+1,0], 0xE2: [+1,-1,+1,0,-1,+1], 0xE3: [+1,-1,+1,+1,0,-1],
        0xE4: [-1,+1,+1,+1,0,-1], 0xE5: [+1,+1,-1,-1,+1,0], 0xE6: [+1,+1,-1,0,-1,+1], 0xE7: [+1,+1,-1,+1,0,-1],
        0xE8: [-1,+1,+1,0,+1,-1], 0xE9: [+1,-1,+1,+1,-1,0], 0xEA: [+1,-1,+1,0,+1,-1], 0xEB: [+1,-1,+1,-1,0,+1],
        0xEC: [-1,+1,+1,-1,0,+1], 0xED: [+1,+1,-1,+1,-1,0], 0xEE: [+1,+1,-1,0,+1,-1], 0xEF: [+1,+1,-1,-1,0,+1],
        0xF0: [+1,0,0,0,-1,+1], 0xF1: [0,+1,0,-1,+1,0], 0xF2: [0,+1,0,0,-1,+1], 0xF3: [0,+1,0,+1,0,-1],
        0xF4: [+1,0,0,+1,0,-1], 0xF5: [0,0,+1,-1,+1,0], 0xF6: [0,0,+1,0,-1,+1], 0xF7: [0,0,+1,+1,0,-1],
        0xF8: [+1,0,0,0,+1,-1], 0xF9: [0,+1,0,+1,-1,0], 0xFA: [0,+1,0,0,+1,-1], 0xFB: [0,+1,0,-1,0,+1],
        0xFC: [+1,0,0,-1,0,+1], 0xFD: [0,0,+1,+1,-1,0], 0xFE: [0,0,+1,0,+1,-1], 0xFF: [0,0,+1,-1,0,+1]
    }

    if (len(bits) %8) != 0: #necessário ser sequencia de BYTES!!!!
        return [], []

    sinal = []
    tempo = []
    
    # Processa cada byte (8 bits) da sequência
    t = 0
    for i in range(0, len(bits), 8):
        bitStr = bits[i:i+8] #"00000110"
        chave = int(bitStr, 2) # 0b0 == 0 == 0x0
        if chave not in mapeamento:
            raise ValueError(f"Byte inválido: {chave}")
        
        sinais = mapeamento[chave]
        
        sinal+=sinais
        
        tempo += [t, t+1, t+2, t+3, t+4, t+5]
        t+=6
    return tempo, sinal

# Lista e mapeamento
codificacoes = [
    "NRZ-L", "NRZ-I", "AMI", "Pseudoternário",
    "Manchester", "Manchester Diferencial", "B8ZS",
    "4B5B","MLT-3", "B8/6T"
]

funcoes_codificacao = {
    "NRZ-L": nrzl,
    "NRZ-I": nrzi,
    "AMI": ami,
    "Pseudoternário": pseudoternario,
    "Manchester": manchester,
    "Manchester Diferencial": manchester_diferencial,
    "B8ZS":b8zs,
    "4B5B":four_b5b,
    "MLT-3":mlt3,
    "B8/6T":_8bt6
}
